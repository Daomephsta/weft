buildscript {
	repositories {
		jcenter()
		maven {
			name "Fabric Repository"
			url 'https://maven.fabricmc.net'
		}
	}
	dependencies {
		classpath "net.fabricmc:stitch:0.2.1.61"
		classpath "commons-io:commons-io:2.6"
	}
}

plugins {
	id 'base'
	id 'maven-publish'
	id 'de.undercouch.download' version '3.4.3'
}

def minecraft_version = '1.14.4'
def cacheFilesMinecraft = file('.gradle/minecraft')

archivesBaseName = 'weft'
group = 'io.github.daomephsta'
version = "${minecraft_version}+build.${build_number}"


publishing {
    publications {
    	maven(MavenPublication) {
            artifact weftZip
    	}
	}
}

import com.google.common.net.UrlEscapers
import groovy.transform.TupleConstructor
import groovy.transform.Canonical
import net.fabricmc.stitch.commands.CommandReorderTiny
import java.util.regex.Pattern
import java.util.regex.Matcher

task downloadIntermediary(type: Download) {
	src UrlEscapers.urlFragmentEscaper().escape("https://github.com/FabricMC/intermediary/raw/master/mappings/${minecraft_version}.tiny")
    dest new File(cacheFilesMinecraft, "${minecraft_version}-intermediary.tiny")
}

task invertIntermediary(dependsOn: downloadIntermediary, type: FileOutput) {
	def inputFile = downloadIntermediary.dest

	def outputFile = new File(cacheFilesMinecraft, "${minecraft_version}-intermediary-inverted.tiny")
	outputs.file(outputFile)
	fileOutput = outputFile

	outputs.upToDateWhen {false}

	doLast {
		logger.lifecycle(':building inverted intermediary')
		String[] args = [
			inputFile.getAbsolutePath(),
			outputFile.getAbsolutePath(),
			'intermediary', 'official'
		]

		new CommandReorderTiny().run(args)
    }
}
Map<String, String> classMappings = [:]
@Canonical
class FieldKey
{
    String owner, name
}
Map<FieldKey, String> fieldMappings = [:]
@Canonical
class MethodKey
{
    String owner, name, descriptor
}
Map<MethodKey, String> methodMappings = [:]

task loadIntermediary(dependsOn: invertIntermediary) {doLast{
    logger.lifecycle(':loading inverted intermediary')
    invertIntermediary.fileOutput.eachLine 
    { line -> 
        String[] tokens = line.split('\t')
        def type = tokens[0]

        switch (type)
        {
            case 'CLASS':
                def (intermediaryName, obfuscatedName) = tokens[1..2]
                classMappings.put(intermediaryName, obfuscatedName)
                break
            case 'FIELD':
                def (owner, descriptor, intermediaryName, obfuscatedName) = tokens[1..4]
                fieldMappings.put(new FieldKey(owner, intermediaryName), obfuscatedName)
                break
            case 'METHOD':
                def (owner, descriptor, intermediaryName, obfuscatedName) = tokens[1..4]
                methodMappings.put(new MethodKey(owner, intermediaryName, descriptor), obfuscatedName)
                break
        }
    }
}}

Pattern whitespaceSplitter = ~/\s/
Pattern objectSignatureFinder = ~'L([a-zA-Z0-9$_\\/]+);'
task remapIntermediaryToObf(dependsOn: loadIntermediary, type: Copy) {
    from 'mappings'
    into "$project.buildDir/mappings/obf"
	outputs.upToDateWhen {false}
    filter 
    { line -> 
        if(line.startsWith('v') && line != 'v1')
            throw new IllegalStateException("Cannot parse unpick format ${line}")
        else if(line.isEmpty() || line.startsWith('#'))
            return null //Remove empty lines and comments, as built mappings are not meant to be read by humans
        else if(line != 'v1')
        {
            def tokens = whitespaceSplitter.split(line).toList()
            tokens.retainAll {!it.isEmpty()}
            if (tokens[0] == 'unpick')
            {
                def (owner, name, descriptor) = tokens[1..3];
                //Check for intermediary names before remapping
                boolean changed = false
                if (owner.contains('class_'))
                {
                    tokens[1] = classMappings.get(owner)
                    changed = true
                }
                if (name.startsWith('method_'))
                {
                    tokens[2] = methodMappings.get(new MethodKey(owner, name, descriptor))
                    changed = true
                }
				Matcher objectSignatureMatcher = objectSignatureFinder.matcher(descriptor)
				while(objectSignatureMatcher.find())
				{
					def objectSignature = objectSignatureMatcher.group(1)
					tokens[3] = tokens[3].replace(objectSignature, classMappings.get(objectSignature))
					changed = true
				}
                return changed ? String.join(' ', tokens) : line
            }
            return line
        }
        return line
    }
    doLast {logger.lifecycle(':remapping unpick definitions from intermediary to obf')}
}

task weftZip(dependsOn: remapIntermediaryToObf, type: Zip) {
	outputs.upToDateWhen remapIntermediaryToObf.outputs.upToDateSpec
    from "$project.buildDir/mappings/obf/"
    destinationDir = file("$project.buildDir/mappings/final")
    doLast {logger.lifecycle(':packaging definitions into zip')}
}

class FileOutput extends DefaultTask {
	@OutputFile File fileOutput
}